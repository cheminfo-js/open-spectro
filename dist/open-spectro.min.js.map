{"version":3,"sources":["webpack:///open-spectro/webpack/universalModuleDefinition","webpack:///open-spectro/open-spectro.min.js","webpack:///open-spectro/webpack/bootstrap 60b7cd74b440e358aacf","webpack:///open-spectro/./src/index.js","webpack:///open-spectro/./src/wavelengthToColor.js","webpack:///open-spectro/./src/parse.js","webpack:///open-spectro/./src/process.js","webpack:///open-spectro/./src/annotations.js","webpack:///open-spectro/./src/util.js","webpack:///open-spectro/./src/getChart.js","webpack:///open-spectro/./src/types.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","wavelengthToColor","parse","process","annotations","util","getChart","wavelengthTocolor","wavelength","red","green","blue","alpha","color","transmittance","experiment","reference","results","i","length","result","Math","log10","push","absorbance","parseData","lines","y","currentValue","fields","split","j","field","trim","match","firstChar","substring","value","difference","indexOf","substr","parseInfo","info","type","fieldType","replace","fieldValue","intensity","percentIntensity","round","values","redPoint","greenPoint","bluePoint","nMRed","nMGreen","nMBlue","backgroundMin","backgroundMax","convertToObject","spectra","spectrum","addInfo","options","key","name","addAbsorbanceTransmittance","Z","E","a","JSON","stringify","A","t","T","addX","diffPoints","diffNM","firstNM","lastNM","x","text","blocs","part","bloc","slice","smooth","nbPixels","array","shift","floor","average","normalize","min","Number","MAX_VALUE","max","MIN_VALUE","getAnnotation","pixel","height","pos2","fillColor","pos","toXY","join","types","experiments","channels","index","Array","isArray","chart","title","axis","label","data","undefined","xAxis","yAxis","lineWidth","R","yUnit","G","B","W"],"mappings":"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","file":"open-spectro.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"openSpectro\"] = factory();\n\telse\n\t\troot[\"openSpectro\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"openSpectro\"] = factory();\n\telse\n\t\troot[\"openSpectro\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\tvar wavelengthToColor = __webpack_require__(1);\n\tvar parse = __webpack_require__(2);\n\tvar process = __webpack_require__(3);\n\tvar annotations = __webpack_require__(4);\n\tvar util = __webpack_require__(5);\n\tvar getChart = __webpack_require__(6);\n\t\n\tmodule.exports.wavelengthTocolor=wavelengthToColor;\n\tmodule.exports.parse=parse;\n\tmodule.exports.process=process;\n\tmodule.exports.annotations=annotations;\n\tmodule.exports.util=util;\n\tmodule.exports.getChart=getChart;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function (wavelength) {\n\t    var red;\n\t    var green;\n\t    var blue;\n\t    var alpha;\n\t\n\t    if (wavelength >= 380 && wavelength < 440) {\n\t        red = -1 * (wavelength - 440) / (440 - 380);\n\t        green = 0;\n\t        blue = 1;\n\t    } else if (wavelength >= 440 && wavelength < 490) {\n\t        red = 0;\n\t        green = (wavelength - 440) / (490 - 440);\n\t        blue = 1;\n\t    } else if (wavelength >= 490 && wavelength < 510) {\n\t        red = 0;\n\t        green = 1;\n\t        blue = -1 * (wavelength - 510) / (510 - 490);\n\t    } else if (wavelength >= 510 && wavelength < 580) {\n\t        red = (wavelength - 510) / (580 - 510);\n\t        green = 1;\n\t        blue = 0;\n\t    } else if (wavelength >= 580 && wavelength < 645) {\n\t        red = 1;\n\t        green = -1 * (wavelength - 645) / (645 - 580);\n\t        blue = 0.0;\n\t    } else if (wavelength >= 645 && wavelength <= 780) {\n\t        red = 1;\n\t        green = 0;\n\t        blue = 0;\n\t    } else {\n\t        red = 0;\n\t        green = 0;\n\t        blue = 0;\n\t    }\n\t\n\t    // outside visible spectrum\n\t    if (wavelength > 780 || wavelength < 380) {\n\t        alpha = 0;\n\t    } else if (wavelength > 700) {\n\t        alpha = (780 - wavelength) / (780 - 700);\n\t    } else if (wavelength < 420) {\n\t        alpha = (wavelength - 380) / (420 - 380);\n\t    } else {\n\t        alpha = 1;\n\t    }\n\t\n\t    return {\n\t        color: \"rgba(\" + (red * 100) + \"%,\" + (green * 100) + \"%,\" + (blue * 100) + \"%, \" + alpha + \")\",\n\t        red: red,\n\t        green: green,\n\t        blue: blue,\n\t        alpha: alpha\n\t    }\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar process=__webpack_require__(3);\n\t\n\t\n\t\n\tfunction transmittance(experiment, reference) {\n\t    var results=[];\n\t    for (var i=0; i<experiment.length; i++) {\n\t        var result=-Math.log10(experiment[i]/reference[i])*100;\n\t        results.push(result);\n\t    }\n\t    return results;\n\t}\n\t\n\tfunction absorbance(experiment, reference) {\n\t    var results=[];\n\t    for (var i=0; i<experiment.length; i++) {\n\t        var result=experiment[i]/reference[i]*100;\n\t        results.push(result);\n\t    }\n\t    return results;\n\t}\n\t\n\t\n\t\n\tvar difference=['r','q','p','o','n','m','l','k','j','%','J','K','L','M','N','O','P','Q','R'];\n\t\n\tfunction parseData(lines) {\n\t    var y=[];\n\t    var currentValue=0;\n\t    for (var i=0; i<lines.length; i++) {\n\t        var line=lines[i];\n\t        var fields=lines[i].split(/( ?(?=[a-zA-Z%])| +(?=[^a-zA-Z%]))/);\n\t        for (var j=0; j<fields.length; j++) {\n\t            var field=fields[j];\n\t            if (field.trim().length>0) {\n\t                // we check if we convert the first character\n\t                if (field.match(/^[j-rJ-R%]/)) {\n\t                    var firstChar=field.substring(0,1);\n\t                    var value=difference.indexOf(firstChar)-9;\n\t                    currentValue+=(value+field.substr(1))>>0;\n\t                } else {\n\t                    currentValue=fields[j]>>0;\n\t                }\n\t                y.push(currentValue);\n\t            }\n\t        }\n\t    }\n\t    return y;\n\t}\n\t\n\t\n\t\n\tfunction parseInfo(info) {\n\t    var result={};\n\t    var fields=info.split(\",\");\n\t    result.type=fields[0];\n\t    for (var i=1; i<fields.length; i++) {\n\t        var field=fields[i];\n\t        var fieldType=field.replace(/^([A-Z]*)(.*)$/,\"$1\");\n\t        var fieldValue=field.replace(/^([A-Z]*)(.*)$/,\"$2\");\n\t        switch(fieldType) {\n\t            case 'I':\n\t                result.intensity=fieldValue>>0;\n\t                result.percentIntensity=Math.round(((fieldValue>>0)/256)*100);\n\t                break;\n\t            case 'RGB':\n\t                var values=fieldValue.split(\"/\");\n\t                result.redPoint=values[0]>>0;\n\t                result.greenPoint=values[1]>>0;\n\t                result.bluePoint=values[2]>>0;\n\t                break;\n\t            case 'REF':\n\t                var values=fieldValue.split(\"/\");\n\t                result.nMRed=values[0]>>0;\n\t                result.nMGreen=values[1]>>0;\n\t                result.nMBlue=values[2]>>0;\n\t                break;\n\t            case 'BG':\n\t                var values=fieldValue.split(\"/\");\n\t                result.backgroundMin=values[0]>>0;\n\t                result.backgroundMax=values[1]>>0;\n\t                break;\n\t            default:\n\t                result[fieldType]=fieldValue;\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\t/*\n\t types are normally: R G B W\n\t Z (background), E (experimental)\n\t A: absorbance\n\t T: transmittance\n\t  */\n\t\n\tfunction convertToObject(spectra) {\n\t    var result={};\n\t    for (var i=0; i<spectra.length; i++) {\n\t        var spectrum=spectra[i];\n\t        result[spectrum.type]=spectrum;\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction addInfo(spectra, options) {\n\t    var options=options || {};\n\t    for (var key in spectra) {\n\t        var spectrum = spectra[key];\n\t        spectrum.name = options.name;\n\t    }\n\t}\n\t\n\tfunction addAbsorbanceTransmittance(spectra) {\n\t    // if we have Z and E we calculate absorbance and transmittance\n\t    if (spectra.Z && spectra.E) {\n\t        var a=JSON.parse(JSON.stringify(spectra.Z));\n\t        a.type=\"A\";\n\t        a.y=absorbance(spectra.E.y, spectra.Z.y);\n\t        spectra.A=a;\n\t        var t=JSON.parse(JSON.stringify(spectra.Z));\n\t        t.type=\"T\";\n\t        t.y=transmittance(spectra.E.y, spectra.Z.y);\n\t        spectra.T=t;\n\t    }\n\t}\n\t\n\tfunction addX(spectra) {\n\t    for (var key in spectra) {\n\t        var spectrum=spectra[key];\n\t        var diffPoints=spectrum.redPoint-spectrum.bluePoint;\n\t        var diffNM=(spectrum.nMRed-spectrum.nMBlue)/(diffPoints-1);\n\t        var length=spectrum.y.length;\n\t\n\t        // we will add all the color spectrum\n\t        // need to guess the nm of the first point and last point\n\t        var firstNM=spectrum.nMBlue-spectrum.bluePoint*diffNM;\n\t        var lastNM=spectrum.nMRed+(length-spectrum.redPoint)*diffNM;\n\t        spectrum.x=[];\n\t        for (var i=0; i<length; i++) {\n\t            var wavelength=firstNM+(lastNM-firstNM)/(length-1)*i;\n\t            spectrum.x.push(wavelength);\n\t        }\n\t    }\n\t}\n\t\n\tmodule.exports = function (text, options) {\n\t    var blocs=text.split(/[\\r\\n]*>/m);\n\t    var results=[];\n\t    for (var part=0; part<blocs.length; part++) {\n\t        var bloc=blocs[part];\n\t        var result=[];\n\t        var lines=bloc.split(/[\\r\\n]+/);\n\t        // first line is the info line\n\t        var info=lines[0];\n\t        if (info && info.match(/^[A-Z]/)) {\n\t            var result=parseInfo(info);\n\t            result.y=parseData(lines.slice(1));\n\t            results.push(result);\n\t        }\n\t\n\t    }\n\t\n\t    var spectra=convertToObject(results);\n\t    addAbsorbanceTransmittance(spectra);\n\t    addInfo(spectra, options);\n\t    process(spectra, options);\n\t    addX(spectra);\n\t\n\t    return spectra;\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// process spectra\n\t\n\tfunction smooth(spectrum, nbPixels) {\n\t    var result=[];\n\t    var array=spectrum.y;\n\t    var shift=Math.floor(nbPixels/2);\n\t\n\t    for (var i=shift; i<(array.length-shift-1); i++) {\n\t        var average=0;\n\t        for (var j=i-shift; j<=i+shift; j++) {\n\t            average+=array[j];\n\t        }\n\t        result.push(average/nbPixels)\n\t    }\n\t\n\t    spectrum.y=result;\n\t    // need to shift the reference point\n\t    spectrum.redPoint-=shift;\n\t    spectrum.bluePoint-=shift;\n\t    spectrum.greenPoint-=shift;\n\t};\n\t\n\tfunction normalize(spectrum) {\n\t    var array=spectrum.y;\n\t    var min=Number.MAX_VALUE;\n\t    var max=Number.MIN_VALUE;\n\t    for (var i=0; i<array.length; i++) {\n\t        if (array[i]<min) min=array[i];\n\t        if (array[i]>max) max=array[i];\n\t    }\n\t    if (min!=max) {\n\t        for (var i=0; i<array.length; i++) {\n\t            array[i]=(array[i]-min)/(max-min);\n\t        }\n\t    } else {\n\t        for (var i=0; i<array.length; i++) {\n\t            array[i]=0.5;\n\t        }\n\t    }\n\t    spectrum.y=array;\n\t}\n\t\n\tmodule.exports=function(spectra, options) {\n\t    var options=options||{};\n\t\n\t    for (var key in spectra) {\n\t        if (options.smooth) {\n\t            smooth(spectra[key], options.smooth);\n\t        }\n\t        if (options.normalize) {\n\t            normalize(spectra[key]);\n\t        }\n\t    }\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar wavelengthToColor = __webpack_require__(1);\n\t\n\t\n\tfunction getAnnotation(pixel, color, height) {\n\t    return {\n\t        \"pos2\": {\n\t            \"y\": height+\"px\",\n\t            \"x\": pixel-1\n\t        },\n\t        \"fillColor\": color,\n\t        \"type\": \"rect\",\n\t        \"pos\": {\n\t            \"y\": \"0px\",\n\t            \"x\": pixel+2\n\t        }\n\t    };\n\t}\n\t\n\tmodule.exports=function(spectrum) {\n\t    var annotations=[];\n\t    annotations.push(getAnnotation(spectrum.nMRed,\"red\",15));\n\t    annotations.push(getAnnotation(spectrum.nMBlue,\"blue\",15));\n\t    annotations.push(getAnnotation(spectrum.nMGreen,\"green\",15));\n\t\n\t    var x=spectrum.x;\n\t    for (var i=0; i<x.length; i++) {\n\t        var color=wavelengthToColor(x[i]).color;\n\t        annotations.push(getAnnotation(x[i],color,10));\n\t    }\n\t    return annotations;\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports.toXY=function(spectrum) {\n\t    var x=spectrum.x;\n\t    var y=spectrum.y;\n\t    var result=[];\n\t    for (var i=0; i< x.length; i++) {\n\t        result.push(x[i]+\"\\t\"+y[i]);\n\t    }\n\t    return result.join('\\r\\n');\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t// convert an experiment, an array of spectra, to a chart\n\t\n\tvar types=__webpack_require__(7);\n\t\n\t\n\t\n\tmodule.exports=function (experiments, channels, index) {\n\t    var channels = channels || 'RGBWZE'\n\t\n\t    if (! Array.isArray(experiments)) experiments=[experiments];\n\t\n\t    var chart = {\n\t        type: \"chart\",\n\t        value: {\n\t            title: \"Open Spectrophotometer results\",\n\t            \"axis\": [\n\t                {\n\t                    \"label\": \"nM\"\n\t                },\n\t                {\n\t                    \"label\": \"Y axis\"\n\t                }\n\t            ],\n\t            \"data\": []\n\t        }\n\t    }\n\t    for (var i = 0; i < experiments.length; i++) {\n\t        if ((index === undefined) || (index === i)) {\n\t            var experiment=experiments[i];\n\t            for (var key in experiment) {\n\t                if (channels.indexOf(key)>-1) {\n\t                    var data=experiment[key];\n\t                    chart.value.data.push({\n\t                        \"x\":data.x,\n\t                        \"y\":data.y,\n\t                        \"label\":types[key].label+\": \"+data.name,\n\t                        xAxis: 0,\n\t                        yAxis: 1,\n\t                        lineWidth: 2,\n\t                        color: 'red'\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    return chart;\n\t}\n\t\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/*\n\t types are normally: R G B W\n\t Z (background), E (experimental)\n\t A: absorbance\n\t T: transmittance\n\t */\n\t\n\tmodule.exports = {\n\t    R:{label:'red', yUnit:\"relative\"},\n\t    G:{label:'green', yUnit:\"relative\"},\n\t    B:{label:'blue', yUnit:\"relative\"},\n\t    W:{label:'white', yUnit:\"relative\"},\n\t    Z:{label:'background', yUnit:\"relative\"},\n\t    E:{label:'experimental', yUnit:\"relative\"},\n\t    A:{label:'absorbance', yUnit:\"(%)\"},\n\t    T:{label:'transmittance', yUnit:\"(%)\"},\n\t}\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** open-spectro.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 60b7cd74b440e358aacf\n **/","'use strict';\n\n\nvar wavelengthToColor = require('./wavelengthToColor');\nvar parse = require('./parse');\nvar process = require('./process');\nvar annotations = require('./annotations');\nvar util = require('./util');\nvar getChart = require('./getChart');\n\nmodule.exports.wavelengthTocolor=wavelengthToColor;\nmodule.exports.parse=parse;\nmodule.exports.process=process;\nmodule.exports.annotations=annotations;\nmodule.exports.util=util;\nmodule.exports.getChart=getChart;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = function (wavelength) {\n    var red;\n    var green;\n    var blue;\n    var alpha;\n\n    if (wavelength >= 380 && wavelength < 440) {\n        red = -1 * (wavelength - 440) / (440 - 380);\n        green = 0;\n        blue = 1;\n    } else if (wavelength >= 440 && wavelength < 490) {\n        red = 0;\n        green = (wavelength - 440) / (490 - 440);\n        blue = 1;\n    } else if (wavelength >= 490 && wavelength < 510) {\n        red = 0;\n        green = 1;\n        blue = -1 * (wavelength - 510) / (510 - 490);\n    } else if (wavelength >= 510 && wavelength < 580) {\n        red = (wavelength - 510) / (580 - 510);\n        green = 1;\n        blue = 0;\n    } else if (wavelength >= 580 && wavelength < 645) {\n        red = 1;\n        green = -1 * (wavelength - 645) / (645 - 580);\n        blue = 0.0;\n    } else if (wavelength >= 645 && wavelength <= 780) {\n        red = 1;\n        green = 0;\n        blue = 0;\n    } else {\n        red = 0;\n        green = 0;\n        blue = 0;\n    }\n\n    // outside visible spectrum\n    if (wavelength > 780 || wavelength < 380) {\n        alpha = 0;\n    } else if (wavelength > 700) {\n        alpha = (780 - wavelength) / (780 - 700);\n    } else if (wavelength < 420) {\n        alpha = (wavelength - 380) / (420 - 380);\n    } else {\n        alpha = 1;\n    }\n\n    return {\n        color: \"rgba(\" + (red * 100) + \"%,\" + (green * 100) + \"%,\" + (blue * 100) + \"%, \" + alpha + \")\",\n        red: red,\n        green: green,\n        blue: blue,\n        alpha: alpha\n    }\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/wavelengthToColor.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\nvar process=require('./process.js');\n\n\n\nfunction transmittance(experiment, reference) {\n    var results=[];\n    for (var i=0; i<experiment.length; i++) {\n        var result=-Math.log10(experiment[i]/reference[i])*100;\n        results.push(result);\n    }\n    return results;\n}\n\nfunction absorbance(experiment, reference) {\n    var results=[];\n    for (var i=0; i<experiment.length; i++) {\n        var result=experiment[i]/reference[i]*100;\n        results.push(result);\n    }\n    return results;\n}\n\n\n\nvar difference=['r','q','p','o','n','m','l','k','j','%','J','K','L','M','N','O','P','Q','R'];\n\nfunction parseData(lines) {\n    var y=[];\n    var currentValue=0;\n    for (var i=0; i<lines.length; i++) {\n        var line=lines[i];\n        var fields=lines[i].split(/( ?(?=[a-zA-Z%])| +(?=[^a-zA-Z%]))/);\n        for (var j=0; j<fields.length; j++) {\n            var field=fields[j];\n            if (field.trim().length>0) {\n                // we check if we convert the first character\n                if (field.match(/^[j-rJ-R%]/)) {\n                    var firstChar=field.substring(0,1);\n                    var value=difference.indexOf(firstChar)-9;\n                    currentValue+=(value+field.substr(1))>>0;\n                } else {\n                    currentValue=fields[j]>>0;\n                }\n                y.push(currentValue);\n            }\n        }\n    }\n    return y;\n}\n\n\n\nfunction parseInfo(info) {\n    var result={};\n    var fields=info.split(\",\");\n    result.type=fields[0];\n    for (var i=1; i<fields.length; i++) {\n        var field=fields[i];\n        var fieldType=field.replace(/^([A-Z]*)(.*)$/,\"$1\");\n        var fieldValue=field.replace(/^([A-Z]*)(.*)$/,\"$2\");\n        switch(fieldType) {\n            case 'I':\n                result.intensity=fieldValue>>0;\n                result.percentIntensity=Math.round(((fieldValue>>0)/256)*100);\n                break;\n            case 'RGB':\n                var values=fieldValue.split(\"/\");\n                result.redPoint=values[0]>>0;\n                result.greenPoint=values[1]>>0;\n                result.bluePoint=values[2]>>0;\n                break;\n            case 'REF':\n                var values=fieldValue.split(\"/\");\n                result.nMRed=values[0]>>0;\n                result.nMGreen=values[1]>>0;\n                result.nMBlue=values[2]>>0;\n                break;\n            case 'BG':\n                var values=fieldValue.split(\"/\");\n                result.backgroundMin=values[0]>>0;\n                result.backgroundMax=values[1]>>0;\n                break;\n            default:\n                result[fieldType]=fieldValue;\n        }\n    }\n    return result;\n}\n\n/*\n types are normally: R G B W\n Z (background), E (experimental)\n A: absorbance\n T: transmittance\n  */\n\nfunction convertToObject(spectra) {\n    var result={};\n    for (var i=0; i<spectra.length; i++) {\n        var spectrum=spectra[i];\n        result[spectrum.type]=spectrum;\n    }\n    return result;\n}\n\nfunction addInfo(spectra, options) {\n    var options=options || {};\n    for (var key in spectra) {\n        var spectrum = spectra[key];\n        spectrum.name = options.name;\n    }\n}\n\nfunction addAbsorbanceTransmittance(spectra) {\n    // if we have Z and E we calculate absorbance and transmittance\n    if (spectra.Z && spectra.E) {\n        var a=JSON.parse(JSON.stringify(spectra.Z));\n        a.type=\"A\";\n        a.y=absorbance(spectra.E.y, spectra.Z.y);\n        spectra.A=a;\n        var t=JSON.parse(JSON.stringify(spectra.Z));\n        t.type=\"T\";\n        t.y=transmittance(spectra.E.y, spectra.Z.y);\n        spectra.T=t;\n    }\n}\n\nfunction addX(spectra) {\n    for (var key in spectra) {\n        var spectrum=spectra[key];\n        var diffPoints=spectrum.redPoint-spectrum.bluePoint;\n        var diffNM=(spectrum.nMRed-spectrum.nMBlue)/(diffPoints-1);\n        var length=spectrum.y.length;\n\n        // we will add all the color spectrum\n        // need to guess the nm of the first point and last point\n        var firstNM=spectrum.nMBlue-spectrum.bluePoint*diffNM;\n        var lastNM=spectrum.nMRed+(length-spectrum.redPoint)*diffNM;\n        spectrum.x=[];\n        for (var i=0; i<length; i++) {\n            var wavelength=firstNM+(lastNM-firstNM)/(length-1)*i;\n            spectrum.x.push(wavelength);\n        }\n    }\n}\n\nmodule.exports = function (text, options) {\n    var blocs=text.split(/[\\r\\n]*>/m);\n    var results=[];\n    for (var part=0; part<blocs.length; part++) {\n        var bloc=blocs[part];\n        var result=[];\n        var lines=bloc.split(/[\\r\\n]+/);\n        // first line is the info line\n        var info=lines[0];\n        if (info && info.match(/^[A-Z]/)) {\n            var result=parseInfo(info);\n            result.y=parseData(lines.slice(1));\n            results.push(result);\n        }\n\n    }\n\n    var spectra=convertToObject(results);\n    addAbsorbanceTransmittance(spectra);\n    addInfo(spectra, options);\n    process(spectra, options);\n    addX(spectra);\n\n    return spectra;\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/parse.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\n// process spectra\n\nfunction smooth(spectrum, nbPixels) {\n    var result=[];\n    var array=spectrum.y;\n    var shift=Math.floor(nbPixels/2);\n\n    for (var i=shift; i<(array.length-shift-1); i++) {\n        var average=0;\n        for (var j=i-shift; j<=i+shift; j++) {\n            average+=array[j];\n        }\n        result.push(average/nbPixels)\n    }\n\n    spectrum.y=result;\n    // need to shift the reference point\n    spectrum.redPoint-=shift;\n    spectrum.bluePoint-=shift;\n    spectrum.greenPoint-=shift;\n};\n\nfunction normalize(spectrum) {\n    var array=spectrum.y;\n    var min=Number.MAX_VALUE;\n    var max=Number.MIN_VALUE;\n    for (var i=0; i<array.length; i++) {\n        if (array[i]<min) min=array[i];\n        if (array[i]>max) max=array[i];\n    }\n    if (min!=max) {\n        for (var i=0; i<array.length; i++) {\n            array[i]=(array[i]-min)/(max-min);\n        }\n    } else {\n        for (var i=0; i<array.length; i++) {\n            array[i]=0.5;\n        }\n    }\n    spectrum.y=array;\n}\n\nmodule.exports=function(spectra, options) {\n    var options=options||{};\n\n    for (var key in spectra) {\n        if (options.smooth) {\n            smooth(spectra[key], options.smooth);\n        }\n        if (options.normalize) {\n            normalize(spectra[key]);\n        }\n    }\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/process.js\n ** module id = 3\n ** module chunks = 0\n **/","'use strict';\n\nvar wavelengthToColor = require('./wavelengthToColor');\n\n\nfunction getAnnotation(pixel, color, height) {\n    return {\n        \"pos2\": {\n            \"y\": height+\"px\",\n            \"x\": pixel-1\n        },\n        \"fillColor\": color,\n        \"type\": \"rect\",\n        \"pos\": {\n            \"y\": \"0px\",\n            \"x\": pixel+2\n        }\n    };\n}\n\nmodule.exports=function(spectrum) {\n    var annotations=[];\n    annotations.push(getAnnotation(spectrum.nMRed,\"red\",15));\n    annotations.push(getAnnotation(spectrum.nMBlue,\"blue\",15));\n    annotations.push(getAnnotation(spectrum.nMGreen,\"green\",15));\n\n    var x=spectrum.x;\n    for (var i=0; i<x.length; i++) {\n        var color=wavelengthToColor(x[i]).color;\n        annotations.push(getAnnotation(x[i],color,10));\n    }\n    return annotations;\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/annotations.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports.toXY=function(spectrum) {\n    var x=spectrum.x;\n    var y=spectrum.y;\n    var result=[];\n    for (var i=0; i< x.length; i++) {\n        result.push(x[i]+\"\\t\"+y[i]);\n    }\n    return result.join('\\r\\n');\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/util.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\n\n// convert an experiment, an array of spectra, to a chart\n\nvar types=require('./types.js');\n\n\n\nmodule.exports=function (experiments, channels, index) {\n    var channels = channels || 'RGBWZE'\n\n    if (! Array.isArray(experiments)) experiments=[experiments];\n\n    var chart = {\n        type: \"chart\",\n        value: {\n            title: \"Open Spectrophotometer results\",\n            \"axis\": [\n                {\n                    \"label\": \"nM\"\n                },\n                {\n                    \"label\": \"Y axis\"\n                }\n            ],\n            \"data\": []\n        }\n    }\n    for (var i = 0; i < experiments.length; i++) {\n        if ((index === undefined) || (index === i)) {\n            var experiment=experiments[i];\n            for (var key in experiment) {\n                if (channels.indexOf(key)>-1) {\n                    var data=experiment[key];\n                    chart.value.data.push({\n                        \"x\":data.x,\n                        \"y\":data.y,\n                        \"label\":types[key].label+\": \"+data.name,\n                        xAxis: 0,\n                        yAxis: 1,\n                        lineWidth: 2,\n                        color: 'red'\n                    });\n                }\n            }\n        }\n    }\n\n    return chart;\n}\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/getChart.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n\n/*\n types are normally: R G B W\n Z (background), E (experimental)\n A: absorbance\n T: transmittance\n */\n\nmodule.exports = {\n    R:{label:'red', yUnit:\"relative\"},\n    G:{label:'green', yUnit:\"relative\"},\n    B:{label:'blue', yUnit:\"relative\"},\n    W:{label:'white', yUnit:\"relative\"},\n    Z:{label:'background', yUnit:\"relative\"},\n    E:{label:'experimental', yUnit:\"relative\"},\n    A:{label:'absorbance', yUnit:\"(%)\"},\n    T:{label:'transmittance', yUnit:\"(%)\"},\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/types.js\n ** module id = 7\n ** module chunks = 0\n **/"],"sourceRoot":""}